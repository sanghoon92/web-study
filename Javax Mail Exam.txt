package com.kcc.sfa.smb2.util;

import java.util.Properties;

import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * 		@주시스템		:	SFA
 * 		@서브 시스템	:	SMB
 * 		@프로그램 ID	:	MailUtil.java
 * 		@프로그램 개요 :	메일관련 유틸객체
 *
 * 		@변경이력
 *      ============================================================================
 * 		1.0  2016. 8. 29.	:	정지호		-	신규생성
 * 		============================================================================
 */

public class MailUtil {

		private MailUtil() {
		}

		private static final Logger logger = LoggerFactory.getLogger( MailUtil.class );

		public static void sendMail() {

				logger.info( "======Send Mail Method()======" );

				String host = "smtp.gmail.com";
				String user = "userId";
				String password = "password";
				Properties props = new Properties();

				props.put( "mail.transport.protocol", "smtp" );
				props.put( "mail.smtp.host", host );
				props.put( "mail.smtp.port", "465" );
				props.put( "mail.smtp.starttls.enable", "true" );
				props.put( "mail.smtps.auth", "true" );
				props.put( "mail.smtp.debug", "true" );
				props.put( "mail.smtp.socketFactory.port", "465" );
				props.put( "mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory" );
				props.put( "mail.smtp.socketFactory.fallback", "false" );

				Session session = Session.getDefaultInstance( props );
				MimeMessage msg = new MimeMessage( session );

				try {
						msg.setFrom( new InternetAddress( user ) );
						msg.addRecipient( Message.RecipientType.TO, new InternetAddress( "받는사람 메일주소" ) );
						msg.setSubject( "Mail Test" );
						msg.setContent( "메일 TEST 본문입니다.<br>html메일입니다.", "text/html;charset=UTF-8" );

						//Transport.send( msg );
						Transport transport = session.getTransport( "smtps" );
						transport.connect( host, user, password );
						transport.sendMessage( msg, msg.getAllRecipients() );
						transport.close();

				}
				catch ( MessagingException e ) {
						e.printStackTrace();
				}

		}

}

/*
 * Properties 값 Test 하기위한 객체.
 * 지울예정
 */
class MailObjectTest extends Properties {

		@Override
		public String toString() {
				return "MailObjectTest [defaults=" + defaults + ", propertyNames()=" + propertyNames() + ", stringPropertyNames()=" + stringPropertyNames() + ", size()=" + size() + ", isEmpty()=" + isEmpty() + ", keys()=" + keys() + ", elements()=" + elements() + ", toString()=" + super.toString() + ", keySet()=" + keySet() + ", entrySet()=" + entrySet() + ", values()=" + values() + ", hashCode()=" + hashCode() + ", getClass()=" + getClass() + "]";
		}

}
